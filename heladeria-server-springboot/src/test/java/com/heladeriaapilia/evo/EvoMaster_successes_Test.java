package com.heladeriaapilia.evo;

import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.ValidatableResponse;
import org.evomaster.client.java.controller.SutHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;

import static io.restassured.RestAssured.given;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.api.EMTestUtils.isValidURIorEmpty;
import static org.evomaster.client.java.controller.api.EMTestUtils.resolveLocation;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.numberMatches;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasItems;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;




/**
 * This file was automatically generated by EvoMaster on 2023-05-15T11:23:45.523721-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 10 tests
 * <br>
 * Covered targets: 231
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new com.heladeriaapilia.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos?tipo=dulce+de+leches")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'nombre'", containsString("Dulce de leche"))
                .body("[0].'tipo'", containsString("dulce de leches"))
                .body("[1].'nombre'", containsString("Dulce de leche granizado"))
                .body("[1].'tipo'", containsString("dulce de leches"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos?tipo=frutas")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'nombre'", containsString("Frutilla al agua"))
                .body("[0].'tipo'", containsString("frutas"))
                .body("[1].'nombre'", containsString("Limón al agua"))
                .body("[1].'tipo'", containsString("frutas"))
                .body("[2].'nombre'", containsString("Naranja al agua"))
                .body("[2].'tipo'", containsString("frutas"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/api-docs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'openapi'", containsString("3.0.3"))
                .body("'info'.'title'", containsString("Heladería Via Apilia"))
                .body("'info'.'contact'.'email'", containsString("devs@heladeria-apilia.com"))
                .body("'info'.'license'.'name'", containsString("Apache 2.0"))
                .body("'info'.'license'.'url'", containsString("http://www.apache.org/licenses/LICENSE-2.0.html"))
                .body("'info'.'version'", containsString("1.0.0"))
                .body("'servers'.size()", equalTo(1))
                .body("'servers'[0].'description'", containsString("Inferred Url"))
                .body("'tags'.size()", equalTo(2))
                .body("'tags'[0].'name'", containsString("gustos-api-controller"))
                .body("'tags'[0].'description'", containsString("Gustos Api Controller"))
                .body("'tags'[1].'name'", containsString("pedidos-api-controller"))
                .body("'tags'[1].'description'", containsString("Pedidos Api Controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'tags'", hasItems("gustos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'summary'", containsString("gustosGet"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'description'", containsString("Listar los gustos de helado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'operationId'", containsString("gustosGetUsingGET"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'name'", containsString("tipo"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'in'", containsString("query"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'description'", containsString("tipo"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'required'", equalTo(false))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'style'", containsString("form"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'schema'.'type'", containsString("string"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'schema'.'enum'.size()", equalTo(4))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'parameters'[0].'schema'.'enum'", hasItems("chocolates", "cremas", "dulce de leches", "frutas"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'responses'.'200'.'description'", containsString("Estos son los gustos de helado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'responses'.'200'.'content'.'application/json'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'responses'.'200'.'content'.'application/json'.'schema'.'items'.'$ref'", containsString("#/components/schemas/Gusto"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'tags'", hasItems("gustos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'summary'", containsString("gustosGustoIdGet"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'description'", containsString("Ver un gusto particular"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'operationId'", containsString("gustosGustoIdGetUsingGET"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'parameters'[0].'name'", containsString("gustoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'parameters'[0].'description'", containsString("id del gusto"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'parameters'[0].'schema'.'type'", containsString("string"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'responses'.'200'.'description'", containsString("El gusto ha sido hallado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'responses'.'200'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Gusto"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'responses'.'400'.'description'", containsString("Malformado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/gustos/{gustoId}'.'get'.'responses'.'404'.'description'", containsString("No se conoce un gusto con tal id"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'summary'", containsString("pedidosPost"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'description'", containsString("Crear un nuevo pedido a la dirección indicada"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'operationId'", containsString("pedidosPostUsingPOST"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'requestBody'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/PedidosBody"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'responses'.'200'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'responses'.'201'.'description'", containsString("El pedido ha sido creado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'responses'.'201'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos'.'post'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'summary'", containsString("pedidosPedidoIdGet"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'description'", containsString("Ver un pedido particular"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'operationId'", containsString("pedidosPedidoIdGetUsingGET"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'[0].'name'", containsString("pedidoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'[0].'description'", containsString("id del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'[0].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'parameters'[0].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'responses'.'200'.'description'", containsString("El pedido ha sido hallado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'responses'.'200'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'responses'.'400'.'description'", containsString("Malformado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'get'.'responses'.'404'.'description'", containsString("No se conoce un pedido con tal id"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'summary'", containsString("pedidosPedidoIdPut"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'description'", containsString("Cambiar los datos de un pedido particular"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'operationId'", containsString("pedidosPedidoIdPutUsingPUT"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'[0].'name'", containsString("pedidoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'[0].'description'", containsString("id del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'[0].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'parameters'[0].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'requestBody'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/PedidosPedidoIdBody"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'responses'.'200'.'description'", containsString("El pedido ha sido actualizado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'responses'.'200'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'responses'.'201'.'description'", containsString("Created"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}'.'put'.'responses'.'404'.'description'", containsString("No se conoce un pedido con tal id"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'summary'", containsString("pedidosPedidoIdPagarPost"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'description'", containsString("Inicia el pago del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'operationId'", containsString("pedidosPedidoIdPagarPostUsingPOST"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'[0].'name'", containsString("pedidoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'[0].'description'", containsString("id del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'[0].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'parameters'[0].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'requestBody'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/DatosDePago"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'responses'.'201'.'description'", containsString("Created"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'responses'.'202'.'description'", containsString("Los datos de pago han sido recibidos y serán procesados"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'responses'.'400'.'description'", containsString("Malformado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pagar'.'post'.'responses'.'404'.'description'", containsString("No se conoce un pedido con tal id"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'summary'", containsString("pedidosPedidoIdPagoGet"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'description'", containsString("Ver el estado del pago de un pedido particular"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'operationId'", containsString("pedidosPedidoIdPagoGetUsingGET"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'[0].'name'", containsString("pedidoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'[0].'description'", containsString("id del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'[0].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'parameters'[0].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'responses'.'200'.'description'", containsString("Este es el estado del pago del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'responses'.'200'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Pago"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'responses'.'400'.'description'", containsString("Malformado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/pago'.'get'.'responses'.'404'.'description'", containsString("No se conoce un pedido con tal id"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'summary'", containsString("pedidosPedidoIdPotesGet"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'description'", containsString("Lista los potes que componen un pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'operationId'", containsString("pedidosPedidoIdPotesGetUsingGET"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'[0].'name'", containsString("pedidoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'[0].'description'", containsString("id del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'[0].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'parameters'[0].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'responses'.'200'.'description'", containsString("Los potes del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'responses'.'200'.'content'.'application/json'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'responses'.'200'.'content'.'application/json'.'schema'.'items'.'$ref'", containsString("#/components/schemas/Pote"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'responses'.'400'.'description'", containsString("Malformado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'get'.'responses'.'404'.'description'", containsString("No se conoce un pedido con tal id"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'summary'", containsString("pedidosPedidoIdPotesPost"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'description'", containsString("Agrega un pote a un pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'operationId'", containsString("pedidosPedidoIdPotesPostUsingPOST"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'[0].'name'", containsString("pedidoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'[0].'description'", containsString("id del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'[0].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'parameters'[0].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'requestBody'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/PedidoIdPotesBody"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'200'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Pote"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'201'.'description'", containsString("El pote fue agregado al pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'201'.'content'.'application/json'.'schema'.'$ref'", containsString("#/components/schemas/Pote"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'400'.'description'", containsString("Malformado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes'.'post'.'responses'.'404'.'description'", containsString("No se conoce un pedido con tal id"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'tags'.size()", equalTo(1))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'tags'", hasItems("pedidos-api-controller"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'summary'", containsString("pedidosPedidoIdPotesPoteIdDelete"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'description'", containsString("quitar un pote de un pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'operationId'", containsString("pedidosPedidoIdPotesPoteIdDeleteUsingDELETE"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[0].'name'", containsString("pedidoId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[0].'description'", containsString("id del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[0].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[0].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[0].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[1].'name'", containsString("poteId"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[1].'description'", containsString("id del pote"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[1].'style'", containsString("simple"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[1].'schema'.'type'", containsString("integer"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'parameters'[1].'schema'.'format'", containsString("int32"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'responses'.'204'.'description'", containsString("El pote fue quitado del pedido"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'responses'.'400'.'description'", containsString("Malformado"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/guidodecaso/heladeria/1.0.0/pedidos/{pedidoId}/potes/{poteId}'.'delete'.'responses'.'404'.'description'", containsString("No se conoce un pedido y/o pote con tal id"))
                .body("'components'.'schemas'.'DatosDePago'.'title'", containsString("DatosDePago"))
                .body("'components'.'schemas'.'DatosDePago'.'required'.size()", equalTo(1))
                .body("'components'.'schemas'.'DatosDePago'.'required'", hasItems("tipoDePago"))
                .body("'components'.'schemas'.'DatosDePago'.'type'", containsString("object"))
                .body("'components'.'schemas'.'DatosDePago'.'properties'.'tipoDePago'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePago'.'properties'.'tipoDePago'.'description'", containsString("se usa para determinar el tipo de pago a usar"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'title'", containsString("DatosDePagoBilleteraVirtual"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'properties'.'alias'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'properties'.'alias'.'description'", containsString("nombre de usuario o alias de la billetera a utilizar"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'properties'.'alias'.'example'", containsString("mi.cuenta.billetera"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'properties'.'tipoDePago'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'properties'.'tipoDePago'.'description'", containsString("se usa para determinar el tipo de pago a usar"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'.size()", equalTo(2))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[0].'$ref'", containsString("#/components/schemas/DatosDePago"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'title'", containsString("DatosDePagoBilleteraVirtual"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'required'.size()", equalTo(2))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'required'", hasItems("alias", "tipoDePago"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'type'", containsString("object"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'properties'.'alias'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'properties'.'alias'.'description'", containsString("nombre de usuario o alias de la billetera a utilizar"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'properties'.'alias'.'example'", containsString("mi.cuenta.billetera"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'properties'.'tipoDePago'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoBilleteraVirtual'.'allOf'[1].'properties'.'tipoDePago'.'description'", containsString("se usa para determinar el tipo de pago a usar"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'title'", containsString("DatosDePagoTarjeta"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'numerosTarjeta'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'numerosTarjeta'.'description'", containsString("los 15 o 16 números de la tarjeta de crédito"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'numerosTarjeta'.'example'", containsString("1234567812345678"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'tipoDePago'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'tipoDePago'.'description'", containsString("se usa para determinar el tipo de pago a usar"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaAnio'.'type'", containsString("number"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaAnio'.'description'", containsString("el año de vencimiento de la tarjeta expresado en dos dígitos"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaAnio'.'format'", containsString("bigdecimal"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaAnio'.'example'", numberMatches(24.0))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaMes'.'type'", containsString("number"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaMes'.'description'", containsString("el mes del vencimiento de la tarjeta de crédito"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaMes'.'format'", containsString("bigdecimal"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'properties'.'vencimientoTarjetaMes'.'example'", numberMatches(4.0))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'.size()", equalTo(2))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[0].'$ref'", containsString("#/components/schemas/DatosDePago"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'title'", containsString("DatosDePagoTarjeta"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'required'.size()", equalTo(4))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'required'", hasItems("numerosTarjeta", "tipoDePago", "vencimientoTarjetaAnio", "vencimientoTarjetaMes"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'type'", containsString("object"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'numerosTarjeta'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'numerosTarjeta'.'description'", containsString("los 15 o 16 números de la tarjeta de crédito"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'numerosTarjeta'.'example'", containsString("1234567812345678"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'tipoDePago'.'type'", containsString("string"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'tipoDePago'.'description'", containsString("se usa para determinar el tipo de pago a usar"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaAnio'.'type'", containsString("number"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaAnio'.'description'", containsString("el año de vencimiento de la tarjeta expresado en dos dígitos"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaAnio'.'format'", containsString("bigdecimal"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaAnio'.'example'", numberMatches(24.0))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaMes'.'type'", containsString("number"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaMes'.'description'", containsString("el mes del vencimiento de la tarjeta de crédito"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaMes'.'format'", containsString("bigdecimal"))
                .body("'components'.'schemas'.'DatosDePagoTarjeta'.'allOf'[1].'properties'.'vencimientoTarjetaMes'.'example'", numberMatches(4.0))
                .body("'components'.'schemas'.'Gusto'.'title'", containsString("Gusto"))
                .body("'components'.'schemas'.'Gusto'.'required'.size()", equalTo(3))
                .body("'components'.'schemas'.'Gusto'.'required'", hasItems("id", "nombre", "tipo"))
                .body("'components'.'schemas'.'Gusto'.'type'", containsString("object"))
                .body("'components'.'schemas'.'Gusto'.'properties'.'nombre'.'type'", containsString("string"))
                .body("'components'.'schemas'.'Gusto'.'properties'.'nombre'.'description'", containsString("nombre legible por humanos para este gusto"))
                .body("'components'.'schemas'.'Gusto'.'properties'.'nombre'.'example'", containsString("Dulce de leche"))
                .body("'components'.'schemas'.'Gusto'.'properties'.'tipo'.'type'", containsString("string"))
                .body("'components'.'schemas'.'Gusto'.'properties'.'tipo'.'enum'.size()", equalTo(4))
                .body("'components'.'schemas'.'Gusto'.'properties'.'tipo'.'enum'", hasItems("chocolates", "cremas", "dulce de leches", "frutas"))
                .body("'components'.'schemas'.'Link'.'title'", containsString("Link"))
                .body("'components'.'schemas'.'Link'.'type'", containsString("object"))
                .body("'components'.'schemas'.'Link'.'properties'.'href'.'type'", containsString("string"))
                .body("'components'.'schemas'.'Link'.'properties'.'href'.'description'", containsString("la URI del link"))
                .body("'components'.'schemas'.'Link'.'properties'.'href'.'example'", containsString("http://foo.com/bar"))
                .body("'components'.'schemas'.'Link'.'properties'.'verb'.'type'", containsString("string"))
                .body("'components'.'schemas'.'Link'.'properties'.'verb'.'description'", containsString("el verbo a usar en el link"))
                .body("'components'.'schemas'.'Link'.'properties'.'verb'.'example'", containsString("GET"))
                .body("'components'.'schemas'.'Link'.'properties'.'verb'.'enum'.size()", equalTo(5))
                .body("'components'.'schemas'.'Link'.'properties'.'verb'.'enum'", hasItems("DELETE", "GET", "PATCH", "POST", "PUT"))
                .body("'components'.'schemas'.'Pago'.'title'", containsString("Pago"))
                .body("'components'.'schemas'.'Pago'.'required'.size()", equalTo(1))
                .body("'components'.'schemas'.'Pago'.'required'", hasItems("status"))
                .body("'components'.'schemas'.'Pago'.'type'", containsString("object"))
                .body("'components'.'schemas'.'Pago'.'properties'.'status'.'type'", containsString("string"))
                .body("'components'.'schemas'.'Pago'.'properties'.'status'.'example'", containsString("pago aceptado"))
                .body("'components'.'schemas'.'Pago'.'properties'.'status'.'enum'.size()", equalTo(4))
                .body("'components'.'schemas'.'Pago'.'properties'.'status'.'enum'", hasItems("pago aceptado", "pago en proceso", "pago fallado", "pendiente de pago"))
                .body("'components'.'schemas'.'Pedido'.'title'", containsString("Pedido"))
                .body("'components'.'schemas'.'Pedido'.'required'.size()", equalTo(2))
                .body("'components'.'schemas'.'Pedido'.'required'", hasItems("direccion_entrega", "id"))
                .body("'components'.'schemas'.'Pedido'.'type'", containsString("object"))
                .body("'components'.'schemas'.'Pedido'.'properties'.'_links'.'$ref'", containsString("#/components/schemas/PedidoLinks"))
                .body("'components'.'schemas'.'Pedido'.'properties'.'direccion_entrega'.'type'", containsString("string"))
                .body("'components'.'schemas'.'Pedido'.'properties'.'direccion_entrega'.'description'", containsString("dirección en la que se ha de entregar este pedido"))
                .body("'components'.'schemas'.'Pedido'.'properties'.'direccion_entrega'.'example'", containsString("Lavalleja 244 4C, CABA"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'title'", containsString("PedidoIdPotesBody"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'required'.size()", equalTo(2))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'required'", hasItems("gustos", "peso"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'type'", containsString("object"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'properties'.'gustos'.'type'", containsString("array"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'properties'.'gustos'.'description'", containsString("los gustos de helado en este pote"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'properties'.'gustos'.'example'", containsString("[\"ddl\",\"pist\"]"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'properties'.'gustos'.'items'.'type'", containsString("string"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'properties'.'peso'.'type'", containsString("string"))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'properties'.'peso'.'enum'.size()", equalTo(3))
                .body("'components'.'schemas'.'PedidoIdPotesBody'.'properties'.'peso'.'enum'", hasItems("1000", "250", "500"))
                .body("'components'.'schemas'.'PedidoLinks'.'title'", containsString("PedidoLinks"))
                .body("'components'.'schemas'.'PedidoLinks'.'type'", containsString("object"))
                .body("'components'.'schemas'.'PedidoLinks'.'properties'.'pagar'.'$ref'", containsString("#/components/schemas/Link"))
                .body("'components'.'schemas'.'PedidoLinks'.'properties'.'pago'.'$ref'", containsString("#/components/schemas/Link"))
                .body("'components'.'schemas'.'PedidoLinks'.'properties'.'potes'.'$ref'", containsString("#/components/schemas/Link"))
                .body("'components'.'schemas'.'PedidosBody'.'title'", containsString("PedidosBody"))
                .body("'components'.'schemas'.'PedidosBody'.'required'.size()", equalTo(1))
                .body("'components'.'schemas'.'PedidosBody'.'required'", hasItems("direccion_entrega"))
                .body("'components'.'schemas'.'PedidosBody'.'type'", containsString("object"))
                .body("'components'.'schemas'.'PedidosBody'.'properties'.'direccion_entrega'.'type'", containsString("string"))
                .body("'components'.'schemas'.'PedidosBody'.'properties'.'direccion_entrega'.'description'", containsString("dirección en la que se ha de entregar este pedido"))
                .body("'components'.'schemas'.'PedidosPedidoIdBody'.'title'", containsString("PedidosPedidoIdBody"))
                .body("'components'.'schemas'.'PedidosPedidoIdBody'.'required'.size()", equalTo(1))
                .body("'components'.'schemas'.'PedidosPedidoIdBody'.'required'", hasItems("direccion_entrega"))
                .body("'components'.'schemas'.'PedidosPedidoIdBody'.'type'", containsString("object"))
                .body("'components'.'schemas'.'PedidosPedidoIdBody'.'properties'.'direccion_entrega'.'type'", containsString("string"))
                .body("'components'.'schemas'.'PedidosPedidoIdBody'.'properties'.'direccion_entrega'.'description'", containsString("dirección en la que se ha de entregar este pedido"))
                .body("'components'.'schemas'.'Pote'.'title'", containsString("Pote"))
                .body("'components'.'schemas'.'Pote'.'required'.size()", equalTo(3))
                .body("'components'.'schemas'.'Pote'.'required'", hasItems("gustos", "id", "peso"))
                .body("'components'.'schemas'.'Pote'.'type'", containsString("object"))
                .body("'components'.'schemas'.'Pote'.'properties'.'_links'.'$ref'", containsString("#/components/schemas/PoteLinks1"))
                .body("'components'.'schemas'.'Pote'.'properties'.'gustos'.'type'", containsString("array"))
                .body("'components'.'schemas'.'Pote'.'properties'.'gustos'.'description'", containsString("los gustos de helado en este pote"))
                .body("'components'.'schemas'.'Pote'.'properties'.'gustos'.'items'.'$ref'", containsString("#/components/schemas/PoteGustos"))
                .body("'components'.'schemas'.'Pote'.'properties'.'peso'.'type'", containsString("string"))
                .body("'components'.'schemas'.'Pote'.'properties'.'peso'.'enum'.size()", equalTo(3))
                .body("'components'.'schemas'.'Pote'.'properties'.'peso'.'enum'", hasItems("1000", "250", "500"))
                .body("'components'.'schemas'.'PoteGustos'.'title'", containsString("PoteGustos"))
                .body("'components'.'schemas'.'PoteGustos'.'type'", containsString("object"))
                .body("'components'.'schemas'.'PoteGustos'.'properties'.'_links'.'$ref'", containsString("#/components/schemas/PoteLinks"))
                .body("'components'.'schemas'.'PoteLinks'.'title'", containsString("PoteLinks"))
                .body("'components'.'schemas'.'PoteLinks'.'type'", containsString("object"))
                .body("'components'.'schemas'.'PoteLinks1'.'title'", containsString("PoteLinks1"))
                .body("'components'.'schemas'.'PoteLinks1'.'type'", containsString("object"))
                .body("'components'.'schemas'.'PoteLinks1'.'properties'.'borrar'.'$ref'", containsString("#/components/schemas/Link"))
                .body("'components'.'schemas'.'PoteLinks1'.'properties'.'pedido'.'$ref'", containsString("#/components/schemas/Link"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"BL6eVy9Ts\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("BL6eVy9Ts"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/883"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("BL6eVy9Ts"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos?tipo=EVOMASTER")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'nombre'", containsString("Dulce de leche"))
                .body("[0].'tipo'", containsString("dulce de leches"))
                .body("[1].'nombre'", containsString("Dulce de leche granizado"))
                .body("[1].'tipo'", containsString("dulce de leches"))
                .body("[2].'nombre'", containsString("Chocolate amargo"))
                .body("[2].'tipo'", containsString("chocolates"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"7P5dm07m\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("7P5dm07m"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"FgpvMgmqFJ\" " + 
                    " } ")
                .put(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/-1440"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("FgpvMgmqFJ"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos?tipo=cremas")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'nombre'", containsString("Sambayón"))
                .body("[0].'tipo'", containsString("cremas"))
                .body("[1].'nombre'", containsString("Mascarpone"))
                .body("[1].'tipo'", containsString("cremas"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'nombre'", containsString("Dulce de leche"))
                .body("[0].'tipo'", containsString("dulce de leches"))
                .body("[1].'nombre'", containsString("Dulce de leche granizado"))
                .body("[1].'tipo'", containsString("dulce de leches"))
                .body("[2].'nombre'", containsString("Chocolate amargo"))
                .body("[2].'tipo'", containsString("chocolates"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos?tipo=chocolates")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'nombre'", containsString("Chocolate amargo"))
                .body("[0].'tipo'", containsString("chocolates"))
                .body("[1].'nombre'", containsString("Chocolate con nuez"))
                .body("[1].'tipo'", containsString("chocolates"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"_wmuySG_QO9bG\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("_wmuySG_QO9bG"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        
    }


}
