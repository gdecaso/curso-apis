package com.heladeriaapilia.evo;

import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.ValidatableResponse;
import org.evomaster.client.java.controller.SutHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;

import static io.restassured.RestAssured.given;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.api.EMTestUtils.isValidURIorEmpty;
import static org.evomaster.client.java.controller.api.EMTestUtils.resolveLocation;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.numberMatches;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.isEmptyOrNullString;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;




/**
 * This file was automatically generated by EvoMaster on 2023-05-15T11:23:45.497281-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 59
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new com.heladeriaapilia.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"_EM_29_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("_EM_29_XYZ_"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"\" " + 
                    " } ")
                .put(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/666"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString(""))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"xXdJ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("xXdJ"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [ " + 
                    " \"_EM_30_XYZ_\", " + 
                    " \"sXB1\", " + 
                    " \"7MUVqi\", " + 
                    " \"Lj\", " + 
                    " \"y\" " + 
                    " ], " + 
                    " \"peso\": \"EVOMASTER\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/671/potes"))
                .then()
                .statusCode(500) // com/heladeriaapilia/api/mapper/PedidoMapper_85_apiToDataPeso
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/guidodecaso/heladeria/1.0.0/pedidos/2/potes"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 400, 401, 403, 404).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .get(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/671/potes"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"g\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("g"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [ " + 
                    " \"jvadbm6ZM4\", " + 
                    " \"byBnh\", " + 
                    " \"cLVHs59\", " + 
                    " \"J_bZl5C_X\", " + 
                    " \"yb\" " + 
                    " ], " + 
                    " \"peso\": \"EVOMASTER\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/263/potes"))
                .then()
                .statusCode(500) // com/heladeriaapilia/api/mapper/PedidoMapper_85_apiToDataPeso
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/guidodecaso/heladeria/1.0.0/pedidos/1/potes"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 400, 401, 403, 404).contains(res_1.extract().statusCode()));
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/263/potes"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
