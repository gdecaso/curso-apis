package com.heladeriaapilia.evo;

import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-05-15T11:23:45.538577-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 19 tests
 * <br>
 * Covered targets: 251
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new com.heladeriaapilia.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/990/pago")
                .then()
                .statusCode(501)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 400, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"_EM_59_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("_EM_59_XYZ_"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"tipoDePago\": \"DatosDePagoTarjeta\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/-130142/pagar"))
                .then()
                .statusCode(501)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 202, 400, 401, 403, 404).contains(res_1.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        String location_pedidos = "";
        String location_potes = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"j6h7fN8mS\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("j6h7fN8mS"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"KXQjNPk\" " + 
                    " } ")
                .put(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/472"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("KXQjNPk"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"Kgvu_KAwdxFPZbc\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("Kgvu_KAwdxFPZbc"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [], " + 
                    " \"peso\": \"1000\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/387/potes"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'peso'", containsString("1000"))
                .body("'gustos'.size()", equalTo(0))
                .body("'_links'.'pedido'.'verb'", containsString("GET"))
                .body("'_links'.'borrar'.'verb'", containsString("DELETE"));
        location_potes = location_pedidos + "/" + res_3.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_potes, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/387/potes/807"))
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"vh1i6ITz\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("vh1i6ITz"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [], " + 
                    " \"peso\": \"250\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/423/potes"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'peso'", containsString("250"))
                .body("'gustos'.size()", equalTo(0))
                .body("'_links'.'pedido'.'verb'", containsString("GET"))
                .body("'_links'.'borrar'.'verb'", containsString("DELETE"));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/423/potes"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'peso'", containsString("250"))
                .body("[0].'gustos'.size()", equalTo(0))
                .body("[0].'_links'.'pedido'.'verb'", containsString("GET"))
                .body("[0].'_links'.'borrar'.'verb'", containsString("DELETE"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"UWKy69VIZnaU4VK\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("UWKy69VIZnaU4VK"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [ " + 
                    " \"Ec76d1Hd3\", " + 
                    " \"Ujm\", " + 
                    " \"0jv5Yu\" " + 
                    " ], " + 
                    " \"peso\": \"500\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/907/potes"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Gusto desconocido Ec76d1Hd3"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"phaujf\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("phaujf"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [ " + 
                    " \"wmrG\", " + 
                    " \"\" " + 
                    " ], " + 
                    " \"peso\": \"500\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/430/potes"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Gusto desconocido wmrG"));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/430/potes"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        String location_pedidos = "";
        String location_potes = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"dklkict\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("dklkict"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [], " + 
                    " \"peso\": \"500\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/850/potes"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'peso'", containsString("500"))
                .body("'gustos'.size()", equalTo(0))
                .body("'_links'.'pedido'.'verb'", containsString("GET"))
                .body("'_links'.'borrar'.'verb'", containsString("DELETE"));
        location_potes = location_pedidos + "/" + res_1.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_potes, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/850/potes/914"))
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"Q6AP\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("Q6AP"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [ " + 
                    " \"B\", " + 
                    " \"fkEUQyIvt_\", " + 
                    " \"fc2EOMOCTCqw\", " + 
                    " \"mXi\" " + 
                    " ], " + 
                    " \"peso\": \"1000\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/688/potes"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Gusto desconocido B"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        
        String location_pedidos = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"_EM_24_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'direccion_entrega'", containsString("_EM_24_XYZ_"))
                .body("'_links'.'potes'.'verb'", containsString("GET"))
                .body("'_links'.'pagar'.'verb'", containsString("POST"))
                .body("'_links'.'pago'.'verb'", containsString("GET"));
        location_pedidos = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_pedidos));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/-33554169/potes"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [ " + 
                    " \"R36\", " + 
                    " \"L\" " + 
                    " ], " + 
                    " \"peso\": \"250\" " + 
                    " } ")
                .post(resolveLocation(location_pedidos, baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/-33554169/potes"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Gusto desconocido R36"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/735/pagar")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/226/potes")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos/rEP%5C3fA9pFi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" null ")
                .put(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/-828074580")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"gustos\": [ " + 
                    " \"lmE\", " + 
                    " \"u\" " + 
                    " ], " + 
                    " \"peso\": \"250\" " + 
                    " } ")
                .post(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/-134217502/potes")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/gustos/P7")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/596/potes/498")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/228")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/807856956/potes")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"direccion_entrega\": \"h\" " + 
                    " } ")
                .put(baseUrlOfSut + "/guidodecaso/heladeria/1.0.0/pedidos/339")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
